# README for a newly created project. (from older c9 project)

There are a couple of things you should do first, before you can use all of Git's power:

  * Add a remote to this project: in the Cloud9 IDE command line, you can execute the following commands
    `git remote add [remote name] [remote url (eg. 'git@github.com:/ajaxorg/node_chat')]` [Enter]
  * Create new files inside your project
  * Add them to to Git by executing the following command
    `git add [file1, file2, file3, ...]` [Enter]
  * Create a commit which can be pushed to the remote you just added
    `git commit -m 'added new files'` [Enter]
  * Push the commit the remote
    `git push [remote name] master` [Enter]

That's it! If this doesn't work for you, please visit the excellent resources from [Github.com](http://help.github.com) and the [Pro Git](http://http://progit.org/book/) book.
If you can't find your answers there, feel free to ask us via Twitter (@cloud9ide), [mailing list](groups.google.com/group/cloud9-ide) or IRC (#cloud9ide on freenode).

Happy coding!

git config --global user.name "Sam Smith"
git config --global user.email sam@example.com
git config --global core.autocrlf true # converts LF endings into CRLF when you check out code
git config --global core.autocrlf input # convert CRLF to LF on commit
git config core.filemode false # per repo, ignore chmod or other mode changes
git config --get remote.origin.url # only the remote URL
git init # Create a new local repository
git clone https://github.com/erxTesting/randowm.git # clone this repo
git clone https://github.com/adtac/climate.git # The swiss-army knife of utility tools for Linux
git clone https://github.com/rw251/git-summary.git # Summarizes multiple git repository status within a directory
./git-summary/git-summary
git remote show origin # full referential integrity output
git remote -v # list all remotes (collaborators)
git remote set-url ^
git branch -a # list all branches
git branch # sho current branch
git branch <new_branch>
git checkout -b <branchname> # create a new branch and switch to it
git checkout <branch_name> # change to branch
git status
git diff
git stash # Discard all local changes, but save them for possible re-use later
git reset --hard # Discard all local changes to all files permanently
git add -A # add all untracked files
git commit -a & rem :wq 
git commit -a -m 'made a change' # commit and add a message and all tracked files
git pull # fetch and merge changes on the remote server to your working directory
git pull --rebase
git push
git push origin 
git checkout ^
