<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TP_PM1" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <collectionProp name="TestPlan.thread_groups"/>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="" elementType="Argument">
            <stringProp name="Argument.name"></stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG: NFL CheckOut" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1287572700000</longProp>
        <longProp name="ThreadGroup.end_time">1287573000000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1; OfficeLiveConnector.1.3; OfficeLivePatch.0.0; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/x-silverlight, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-us</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">checkout.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">All threads</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">Family,ItemNo</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
          <stringProp name="BeanShellAssertion.query">log.error(&quot;Thread Number: &quot; + ${__threadNum} + &quot;; Iteration: &quot; + ${__counter});</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">//log.error(&quot;Thread Number: &quot; + ${__threadNum});
log.error(&quot;; Iteration: &quot; + ${__counter});

Thread current = Thread.currentThread();
String tName = current.getName() ;
String tName2 = (current.getName()).substring(0, 4) ;
String tId = tName.substring(tName.lastIndexOf(&quot;-&quot;) + 1);
int id1 = Integer.parseInt(tId);

log.error(&quot;tName: &quot; + tName + &quot;; tId: &quot; + tId);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Step 1" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1. PRODUCT PAGE /product/index.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="productId" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">3915789</stringProp>
                  <stringProp name="Argument.name">productId</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="kw" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">3915789</stringProp>
                  <stringProp name="Argument.name">kw</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sr" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">sr</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="origkw" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">3915789</stringProp>
                  <stringProp name="Argument.name">origkw</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fb_xd_fragment#?" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">fb_xd_fragment#?</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cb" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">f1e065615bf417a</stringProp>
                  <stringProp name="Argument.name">cb</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="relation" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">parent.parent</stringProp>
                  <stringProp name="Argument.name">relation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transport" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">fragment</stringProp>
                  <stringProp name="Argument.name">transport</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">resize</stringProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/product/index.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://www.facebook.com/plugins/like.php?channel_url=http%3A%2F%2Fnfl.tst04.gspt.net%2Fproduct%2Findex.jsp%3FproductId%3D3915789%26kw%3D3915789%26sr%3D1%26origkw%3D3915789%26fb_xd_fragment%23%3F%3D%26cb%3Df1e065615bf417a%26relation%3Dparent.parent%26transport%3Dfragment&amp;colorscheme=default&amp;font=Arial&amp;href=www.nflshop.com%2Fproduct%2Findex.jsp%3FproductId%3D3915789&amp;layout=standard&amp;locale=en_US&amp;node_type=1&amp;ref=3915789&amp;sdk=joey&amp;show_faces=true&amp;width=381</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="prod_0" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">prod_0</stringProp>
              <stringProp name="RegexExtractor.regex">=prod_0 value=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2. ADD TO CART /cartHandler/index.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="action" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">skuAddToCart</stringProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sceneZoomImageReference" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">sceneZoomImageReference</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wlName" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">wlName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="showMy" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">showMy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="prod_0" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">${prod_0}</stringProp>
                  <stringProp name="Argument.name">prod_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qty_0" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">qty_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cartHandler/index.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://nfl.tst04.gspt.net/product/index.jsp?productId=3915789&amp;kw=3915789&amp;sr=1&amp;origkw=3915789</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="shippingId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">shippingId</stringProp>
              <stringProp name="RegexExtractor.regex">input id=&quot;cartItemMap(.+?).quantity&quot; name=</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3. GO TO CHECKOUT /cart/updatecartquantity.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cartItemMap[${shippingId}].quantity" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">cartItemMap[${shippingId}].quantity</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ecscheckout" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">ecscheckout</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="checkout" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Y</stringProp>
                  <stringProp name="Argument.name">checkout</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cart/updatecartquantity.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://nfl.tst04.gspt.net/cart/index.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="flowExecutionKey" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flowExecutionKey</stringProp>
              <stringProp name="RegexExtractor.regex">_flowExecutionKey&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4. BILLING ADDRESS /checkout.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ignoreShippingAddressSuggestions" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.name">ignoreShippingAddressSuggestions</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ignoreBillingAddressSuggestions" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.name">ignoreBillingAddressSuggestions</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="onlyValidateUSandCA" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.name">onlyValidateUSandCA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.id" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.id</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.firstName" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">FName</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.firstName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.lastName" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">LName</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.lastName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.address1" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">630 allendale rd</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.address1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.address2" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">billingAddress.address.address2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.country" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">US</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.country</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.city" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">king of prussia</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.city</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.state" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">PA</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.state</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.stateAlternateText" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">billingAddress.address.stateAlternateText</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.address.postalCode" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">19406</stringProp>
                  <stringProp name="Argument.name">billingAddress.address.postalCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.phone" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">3452343241</stringProp>
                  <stringProp name="Argument.name">billingAddress.phone</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billingAddress.emailAddress" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">d@s.com</stringProp>
                  <stringProp name="Argument.name">billingAddress.emailAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sendEmailUpdates" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.name">sendEmailUpdates</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_sendEmailUpdates" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.name">_sendEmailUpdates</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.id" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.id</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shipOption" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">shipOption</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.firstName" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.firstName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.lastName" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.lastName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.address1" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.address1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.address2" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.address2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.country" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">US</stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.country</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.city" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.city</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.state" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.state</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.stateAlternateText" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.stateAlternateText</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.address.postalCode" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.address.postalCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingAddress.phone" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">shippingAddress.phone</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId_continue" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Continue Checkout</stringProp>
                  <stringProp name="Argument.name">_eventId_continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnToCart" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Return to Cart</stringProp>
                  <stringProp name="Argument.name">returnToCart</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_flowExecutionKey" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">${flowExecutionKey}</stringProp>
                  <stringProp name="Argument.name">_flowExecutionKey</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://nfl.tst04.gspt.net/checkout.jsp?_flowExecutionKey=_c74048781-CF5F-E59A-3899-B62C566407DA_k9860E9A4-ACE5-C05E-B8C1-5C8B282CBFEF</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="flowExecutionKey1" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flowExecutionKey1</stringProp>
              <stringProp name="RegexExtractor.regex">_flowExecutionKey&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5. SHIPPING INFO /checkout.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="shippingBucketsByAddress[0].shippingBuckets[0].currentShippingOptionId" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Standard_Ground</stringProp>
                  <stringProp name="Argument.name">shippingBucketsByAddress[0].shippingBuckets[0].currentShippingOptionId</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId_continue" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Continue Checkout</stringProp>
                  <stringProp name="Argument.name">_eventId_continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnToCart" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Return to Cart</stringProp>
                  <stringProp name="Argument.name">returnToCart</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_flowExecutionKey" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">${flowExecutionKey1}</stringProp>
                  <stringProp name="Argument.name">_flowExecutionKey</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://nfl.tst04.gspt.net/checkout.jsp?_flowExecutionKey=_c74048781-CF5F-E59A-3899-B62C566407DA_k020199F6-CB9C-95CE-2F07-EEEF5828E256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="flowExecutionKey2" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flowExecutionKey2</stringProp>
              <stringProp name="RegexExtractor.regex">_flowExecutionKey&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6. PAYMENT /checkout.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="activePaymentMethod" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">CREDIT_CARD</stringProp>
                  <stringProp name="Argument.name">activePaymentMethod</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.cardType" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">VC</stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.cardType</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.cardNumber" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">4111111111111111</stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.cardNumber</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.selectedCreditCardId" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.selectedCreditCardId</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.expirationMonth" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.expirationMonth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.expirationYear" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">2013</stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.expirationYear</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardPaymentMethod.ccvNumber" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                  <stringProp name="Argument.name">creditCardPaymentMethod.ccvNumber</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billMeLaterPaymentMethod.selectedPaymentPlanCode" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">44.504990400005206</stringProp>
                  <stringProp name="Argument.name">billMeLaterPaymentMethod.selectedPaymentPlanCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billMeLaterPaymentMethod.monthOfBirth" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">billMeLaterPaymentMethod.monthOfBirth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billMeLaterPaymentMethod.dayOfBirth" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.name">billMeLaterPaymentMethod.dayOfBirth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billMeLaterPaymentMethod.yearOfBirth" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">1992</stringProp>
                  <stringProp name="Argument.name">billMeLaterPaymentMethod.yearOfBirth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="billMeLaterPaymentMethod.ssnLast4" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">billMeLaterPaymentMethod.ssnLast4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_billMeLaterPaymentMethod.agreeToElectronicTAndC" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.name">_billMeLaterPaymentMethod.agreeToElectronicTAndC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_billMeLaterPaymentMethod.agreeToPlanTandC" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.name">_billMeLaterPaymentMethod.agreeToPlanTandC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redeemableCardPaymentForm.cardNumber" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">redeemableCardPaymentForm.cardNumber</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redeemableCardPaymentForm.cardPIN" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">redeemableCardPaymentForm.cardPIN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="promoCode" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.name">promoCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId_continue" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Continue Checkout</stringProp>
                  <stringProp name="Argument.name">_eventId_continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnToCart" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Return to Cart</stringProp>
                  <stringProp name="Argument.name">returnToCart</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_flowExecutionKey" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">${flowExecutionKey2}</stringProp>
                  <stringProp name="Argument.name">_flowExecutionKey</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://nfl.tst04.gspt.net/checkout.jsp?_flowExecutionKey=_c74048781-CF5F-E59A-3899-B62C566407DA_k986E269C-7C44-AA97-E6F2-E1303803917F</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="flowExecutionKey3" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flowExecutionKey3</stringProp>
              <stringProp name="RegexExtractor.regex">_flowExecutionKey&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7. COMPLETE ORDER /checkout.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_flowExecutionKey" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">${flowExecutionKey3}</stringProp>
                  <stringProp name="Argument.name">_flowExecutionKey</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="userPrefs" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">TF1;014;5;7;22145;6%2C0%2C2900%2C5512;6%2C0%2C2900%2C2180;6%2C0%2C3%2C531;6%2C0%2C1%2C223;11%2C0%2C5721%2C5145;7%2C0%2C5730%2C11;6%2C0%2C1%2C223;5%2C0%2C2918%2C1900;7%2C0%2C5730%2C11;;7%2C0%2C5730%2C11;6%2C0%2C5730%2C11;11%2C0%2C5721%2C5145;4%2C4%2C0%2C3400;7%2C0%2C5730%2C11;6%2C0%2C2900%2C5512;4%2C71%2C1968%2C1;5%2C0%2C5000%2C0;Mozilla;Microsoft%20Internet%20Explorer;4.0%20%28compatible%3B%20MSIE%207.0%3B%20Windows%20NT%205.1%3B%20.NET%20CLR%201.1.4322%3B%20.NET%20CLR%202.0.50727%3B%20.NET%20CLR%203.0.04506.30%3B%20.NET%20CLR%203.0.04506.648%3B%20InfoPath.1%3B%20OfficeLiveConnector.1.3%3B%20OfficeLivePatch.0.0%3B%20.NET%20CLR%203.0.4506.2152%3B%20.NET%20CLR%203.5.30729%29;0;en-us;true;x86;true;Win32;en-us;Mozilla/4.0%20%28compatible%3B%20MSIE%207.0%3B%20Windows%20NT%205.1%3B%20.NET%20CLR%201.1.4322%3B%20.NET%20CLR%202.0.50727%3B%20.NET%20CLR%203.0.04506.30%3B%20.NET%20CLR%203.0.04506.648%3B%20InfoPath.1%3B%20OfficeLiveConnector.1.3%3B%20OfficeLivePatch.0.0%3B%20.NET%20CLR%203.0.4506.2152%3B%20.NET%20CLR%203.5.30729%29;en-us;windows-1252;nfl.tst04.gspt.net;96;96;false;0;true;true;1287502559753;-5;Tuesday%2C%20June%2007%2C%202005%209%3A33%3A44%20PM;1280;1024;;WIN%209%2C0%2C124%2C0;;;;;110;300;240;Tuesday%2C%20October%2019%2C%202010%2011%3A35%3A59%20AM;32;</stringProp>
                  <stringProp name="Argument.name">userPrefs</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="shippingBucketsByAddress[0].shippingBuckets[0].currentShippingOptionId" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Standard_Ground</stringProp>
                  <stringProp name="Argument.name">shippingBucketsByAddress[0].shippingBuckets[0].currentShippingOptionId</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId_continue" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Send My Order</stringProp>
                  <stringProp name="Argument.name">_eventId_continue</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="returnToCart" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">Return to Cart</stringProp>
                  <stringProp name="Argument.name">returnToCart</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/checkout.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://nfl.tst04.gspt.net/checkout.jsp?_flowExecutionKey=_c74048781-CF5F-E59A-3899-B62C566407DA_kBD2BB006-D979-6B87-37C5-12B6E2192CDF</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8. REGISTRATION /account/registeruserform.jsp" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="password" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="confirmedPassword" elementType="HTTPArgument">
                  <stringProp name="HTTPArgument.always_encode">true</stringProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.name">confirmedPassword</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.use_equals">true</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/account/registeruserform.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers"/>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8. BACK TO HOME /home/index.jsp" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nfl.tst04.gspt.net</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/home/index.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://nfl.tst04.gspt.net/checkout.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
